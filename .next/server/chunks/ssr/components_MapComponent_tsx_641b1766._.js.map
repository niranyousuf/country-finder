{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/skaylark/Documents/countryfinder/components/MapComponent.tsx"],"sourcesContent":["'use client'\n\nimport { useEffect, useState } from 'react'\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\n\ninterface MapComponentProps {\n  center: number[]\n  countryCode: string\n  zoom: number\n}\n\nexport default function MapComponent({ center, countryCode, zoom }: MapComponentProps) {\n  const [geoData, setGeoData] = useState<any>(null)\n\n  useEffect(() => {\n    const fetchGeoData = async () => {\n      try {\n        const response = await fetch(`https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_50m_admin_0_countries.geojson`)\n        const data = await response.json()\n        const countryFeature = data.features.find(\n          (feature: any) => feature.properties.ISO_A3 === countryCode\n        )\n        setGeoData(countryFeature ? { type: 'FeatureCollection', features: [countryFeature] } : null)\n      } catch (error) {\n        console.error('Error fetching GeoJSON:', error)\n      }\n    }\n\n    if (countryCode) {\n      fetchGeoData()\n    }\n  }, [countryCode])\n\n  if (!center || !countryCode) return null\n\n  return (\n    <MapContainer\n      center={[center[0], center[1]]}\n      zoom={zoom}\n      style={{ height: '100%', width: '100%' }}\n      scrollWheelZoom={false}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {geoData && (\n        <GeoJSON\n          data={geoData}\n          style={{\n            fillColor: '#ccc',\n            weight: 2,\n            opacity: 1,\n            color: '#1d4ed8',\n            fillOpacity: 0.7\n          }}\n        />\n      )}\n    </MapContainer>\n  )\n}"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAHA;;;;;AAYe,SAAS,aAAa,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAqB;IACnF,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAO;IAE5C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,eAAe;YACnB,IAAI;gBACF,MAAM,WAAW,MAAM,MAAM,CAAC,8GAA8G,CAAC;gBAC7I,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,MAAM,iBAAiB,KAAK,QAAQ,CAAC,IAAI,CACvC,CAAC,UAAiB,QAAQ,UAAU,CAAC,MAAM,KAAK;gBAElD,WAAW,iBAAiB;oBAAE,MAAM;oBAAqB,UAAU;wBAAC;qBAAe;gBAAC,IAAI;YAC1F,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,2BAA2B;YAC3C;QACF;QAEA,IAAI,aAAa;YACf;QACF;IACF,GAAG;QAAC;KAAY;IAEhB,IAAI,CAAC,UAAU,CAAC,aAAa,OAAO;IAEpC,qBACE,8OAAC,uJAAA,CAAA,eAAY;QACX,QAAQ;YAAC,MAAM,CAAC,EAAE;YAAE,MAAM,CAAC,EAAE;SAAC;QAC9B,MAAM;QACN,OAAO;YAAE,QAAQ;YAAQ,OAAO;QAAO;QACvC,iBAAiB;;0BAEjB,8OAAC,oJAAA,CAAA,YAAS;gBACR,aAAY;gBACZ,KAAI;;;;;;YAEL,yBACC,8OAAC,kJAAA,CAAA,UAAO;gBACN,MAAM;gBACN,OAAO;oBACL,WAAW;oBACX,QAAQ;oBACR,SAAS;oBACT,OAAO;oBACP,aAAa;gBACf;;;;;;;;;;;;AAKV","debugId":null}}]
}